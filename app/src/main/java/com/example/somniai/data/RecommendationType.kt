package com.example.somniai.data


/**
 * Types of sleep recommendations that can be generated by the AI system
 */
enum class RecommendationType(
    val displayName: String,
    val description: String,
    val category: RecommendationCategory
) {
    SLEEP_QUALITY(
        displayName = "Sleep Quality",
        description = "Recommendations to improve overall sleep quality",
        category = RecommendationCategory.CORE_SLEEP
    ),

    SLEEP_DURATION(
        displayName = "Sleep Duration",
        description = "Recommendations for optimal sleep duration",
        category = RecommendationCategory.CORE_SLEEP
    ),

    BEDTIME_CONSISTENCY(
        displayName = "Bedtime Consistency",
        description = "Recommendations for consistent sleep schedule",
        category = RecommendationCategory.CORE_SLEEP
    ),

    ENVIRONMENT(
        displayName = "Sleep Environment",
        description = "Recommendations for optimizing sleep environment",
        category = RecommendationCategory.ENVIRONMENT
    ),

    STRESS_MANAGEMENT(
        displayName = "Stress Management",
        description = "Recommendations for managing stress and anxiety",
        category = RecommendationCategory.LIFESTYLE
    ),

    EXERCISE(
        displayName = "Exercise",
        description = "Recommendations for exercise and physical activity",
        category = RecommendationCategory.LIFESTYLE
    ),

    NUTRITION(
        displayName = "Nutrition",
        description = "Recommendations for diet and nutrition",
        category = RecommendationCategory.LIFESTYLE
    ),

    SCREEN_TIME(
        displayName = "Screen Time",
        description = "Recommendations for managing screen time before bed",
        category = RecommendationCategory.LIFESTYLE
    ),

    TEMPERATURE(
        displayName = "Temperature",
        description = "Recommendations for optimal bedroom temperature",
        category = RecommendationCategory.ENVIRONMENT
    ),

    NOISE(
        displayName = "Noise Control",
        description = "Recommendations for managing noise levels",
        category = RecommendationCategory.ENVIRONMENT
    ),

    LIGHTING(
        displayName = "Lighting",
        description = "Recommendations for optimal lighting conditions",
        category = RecommendationCategory.ENVIRONMENT
    ),

    ROUTINE(
        displayName = "Sleep Routine",
        description = "Recommendations for bedtime and wake-up routines",
        category = RecommendationCategory.CORE_SLEEP
    );

    companion object {
        fun fromString(value: String): RecommendationType? {
            return values().find { it.name.equals(value, ignoreCase = true) }
        }

        fun getCoreTypes(): List<RecommendationType> {
            return values().filter { it.category == RecommendationCategory.CORE_SLEEP }
        }

        fun getLifestyleTypes(): List<RecommendationType> {
            return values().filter { it.category == RecommendationCategory.LIFESTYLE }
        }

        fun getEnvironmentTypes(): List<RecommendationType> {
            return values().filter { it.category == RecommendationCategory.ENVIRONMENT }
        }
    }
}

/**
 * Categories for grouping recommendation types
 */
enum class RecommendationCategory(val displayName: String) {
    CORE_SLEEP("Core Sleep"),
    ENVIRONMENT("Environment"),
    LIFESTYLE("Lifestyle")
}